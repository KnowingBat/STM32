
USART_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  00010418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000418  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000418  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000418  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001207  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000362  00000000  00000000  0001164f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  000119b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00011a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ea86  00000000  00000000  00011ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d3a  00000000  00000000  00020536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053a9b  00000000  00000000  00021270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00074d0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  00074d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003f8 	.word	0x080003f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003f8 	.word	0x080003f8

080001d8 <main>:
#define GPIOA_5		(1U<<5)
#define LED_PIN		GPIOA_5

char key;

int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b14      	ldr	r3, [pc, #80]	; (8000230 <main+0x58>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a13      	ldr	r2, [pc, #76]	; (8000230 <main+0x58>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (1U<<10);
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <main+0x5c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a11      	ldr	r2, [pc, #68]	; (8000234 <main+0x5c>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <main+0x5c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <main+0x5c>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	uart2_init();
 8000200:	f000 f81c 	bl	800023c <uart2_init>

	while(1){
		key = uart2_read();
 8000204:	f000 f870 	bl	80002e8 <uart2_read>
 8000208:	4603      	mov	r3, r0
 800020a:	461a      	mov	r2, r3
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <main+0x60>)
 800020e:	701a      	strb	r2, [r3, #0]
		if(key == '1'){
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <main+0x60>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b31      	cmp	r3, #49	; 0x31
 8000216:	d103      	bne.n	8000220 <main+0x48>
			GPIOA->ODR = LED_PIN;
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <main+0x5c>)
 800021a:	2220      	movs	r2, #32
 800021c:	615a      	str	r2, [r3, #20]
 800021e:	e7f1      	b.n	8000204 <main+0x2c>
		}else {
			GPIOA->ODR &= ~LED_PIN;
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <main+0x5c>)
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	4a03      	ldr	r2, [pc, #12]	; (8000234 <main+0x5c>)
 8000226:	f023 0320 	bic.w	r3, r3, #32
 800022a:	6153      	str	r3, [r2, #20]
		key = uart2_read();
 800022c:	e7ea      	b.n	8000204 <main+0x2c>
 800022e:	bf00      	nop
 8000230:	40023800 	.word	0x40023800
 8000234:	40020000 	.word	0x40020000
 8000238:	2000001c 	.word	0x2000001c

0800023c <uart2_init>:
int __io_putchar(uint8_t ch){
	uart2_write(ch);
	return ch;
}

void uart2_init(){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	//COnfigure uart gpio pin
	RCC->AHB1ENR |= GPIOAEN;
 8000240:	4b25      	ldr	r3, [pc, #148]	; (80002d8 <uart2_init+0x9c>)
 8000242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000244:	4a24      	ldr	r2, [pc, #144]	; (80002d8 <uart2_init+0x9c>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6313      	str	r3, [r2, #48]	; 0x30
	//Set PA2 to alternate function mode
	//Set PA2 alternate function to AF07
	GPIOA->MODER &= ~(1U<<4);
 800024c:	4b23      	ldr	r3, [pc, #140]	; (80002dc <uart2_init+0xa0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a22      	ldr	r2, [pc, #136]	; (80002dc <uart2_init+0xa0>)
 8000252:	f023 0310 	bic.w	r3, r3, #16
 8000256:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000258:	4b20      	ldr	r3, [pc, #128]	; (80002dc <uart2_init+0xa0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a1f      	ldr	r2, [pc, #124]	; (80002dc <uart2_init+0xa0>)
 800025e:	f043 0320 	orr.w	r3, r3, #32
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (7U<<8);
 8000264:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <uart2_init+0xa0>)
 8000266:	6a1b      	ldr	r3, [r3, #32]
 8000268:	4a1c      	ldr	r2, [pc, #112]	; (80002dc <uart2_init+0xa0>)
 800026a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800026e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000270:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <uart2_init+0xa0>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a19      	ldr	r2, [pc, #100]	; (80002dc <uart2_init+0xa0>)
 8000276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800027a:	6213      	str	r3, [r2, #32]

	//Set PA3 to alternate function mode
	GPIOA->MODER &= ~(1U<<6);
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <uart2_init+0xa0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a16      	ldr	r2, [pc, #88]	; (80002dc <uart2_init+0xa0>)
 8000282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000286:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <uart2_init+0xa0>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a13      	ldr	r2, [pc, #76]	; (80002dc <uart2_init+0xa0>)
 800028e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000292:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (7U<<12);
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <uart2_init+0xa0>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a10      	ldr	r2, [pc, #64]	; (80002dc <uart2_init+0xa0>)
 800029a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800029e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 80002a0:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <uart2_init+0xa0>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <uart2_init+0xa0>)
 80002a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002aa:	6213      	str	r3, [r2, #32]

	//Enable clock access to RCC_APB1ENR
	RCC->APB1ENR = USARTEN2;
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <uart2_init+0x9c>)
 80002ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80002b2:	641a      	str	r2, [r3, #64]	; 0x40
	//Set the Baudrate
	uart_set_baud(USART2, APB1_CLK, BAUD);
 80002b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b8:	4909      	ldr	r1, [pc, #36]	; (80002e0 <uart2_init+0xa4>)
 80002ba:	480a      	ldr	r0, [pc, #40]	; (80002e4 <uart2_init+0xa8>)
 80002bc:	f000 f828 	bl	8000310 <uart_set_baud>
	//TX enable, m=8 BIT word
	USART2->CR1 = (CR1_TE | CR1_RE);
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <uart2_init+0xa8>)
 80002c2:	220c      	movs	r2, #12
 80002c4:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= UE;
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <uart2_init+0xa8>)
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <uart2_init+0xa8>)
 80002cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002d0:	60d3      	str	r3, [r2, #12]
	//RX Enable
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000
 80002e0:	00f42400 	.word	0x00f42400
 80002e4:	40004400 	.word	0x40004400

080002e8 <uart2_read>:

char uart2_read(){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	//COntrol if receive data reg. is no empty
	while(!(USART2->SR & RXNE));
 80002ec:	bf00      	nop
 80002ee:	4b07      	ldr	r3, [pc, #28]	; (800030c <uart2_read+0x24>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 0320 	and.w	r3, r3, #32
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <uart2_read+0x6>
	return USART2->DR;
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <uart2_read+0x24>)
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	b2db      	uxtb	r3, r3
}
 8000300:	4618      	mov	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40004400 	.word	0x40004400

08000310 <uart_set_baud>:
	while(!(USART2->SR & TXE));
	//Transmit to data register
	USART2->DR = (ch & 0XFF);
}

static void uart_set_baud(USART_TypeDef *USARTx, uint32_t clk,uint32_t baud){
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_baud(clk,baud);
 800031c:	6879      	ldr	r1, [r7, #4]
 800031e:	68b8      	ldr	r0, [r7, #8]
 8000320:	f000 f808 	bl	8000334 <compute_uart_baud>
 8000324:	4603      	mov	r3, r0
 8000326:	461a      	mov	r2, r3
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	609a      	str	r2, [r3, #8]
}
 800032c:	bf00      	nop
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}

08000334 <compute_uart_baud>:

static uint16_t compute_uart_baud(uint32_t clk, uint32_t baud){
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	6039      	str	r1, [r7, #0]
	return ((clk + (baud/2U))/baud);
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	085a      	lsrs	r2, r3, #1
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	441a      	add	r2, r3
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	fbb2 f3f3 	udiv	r3, r2, r3
 800034c:	b29b      	uxth	r3, r3
}
 800034e:	4618      	mov	r0, r3
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
	...

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff23 	bl	80001d8 <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a8:	20000020 	.word	0x20000020

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	; (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	; (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	; (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	; (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
