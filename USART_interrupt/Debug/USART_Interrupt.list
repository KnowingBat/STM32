
USART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800046c  08000474  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800046c  0800046c  00010474  2**0
                  CONTENTS
  4 .ARM          00000000  0800046c  0800046c  00010474  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800046c  08000474  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000470  08000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000474  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000474  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010474  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015f0  00000000  00000000  000104a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000458  00000000  00000000  00011a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00011ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00011fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ea92  00000000  00000000  00012028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e09  00000000  00000000  00020aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053f08  00000000  00000000  000218c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000757cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001bc  00000000  00000000  00075820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000454 	.word	0x08000454

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000454 	.word	0x08000454

080001d8 <main>:

static void usart2_callback();

char key;

int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0a      	ldr	r3, [pc, #40]	; (8000208 <main+0x30>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a09      	ldr	r2, [pc, #36]	; (8000208 <main+0x30>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (1U<<10);
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <main+0x34>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <main+0x34>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <main+0x34>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <main+0x34>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	uart2_interrupt();
 8000200:	f000 f852 	bl	80002a8 <uart2_interrupt>

	while(1){
 8000204:	e7fe      	b.n	8000204 <main+0x2c>
 8000206:	bf00      	nop
 8000208:	40023800 	.word	0x40023800
 800020c:	40020000 	.word	0x40020000

08000210 <usart2_callback>:
	}
}

static void usart2_callback(){
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	key = USART2->DR;
 8000214:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <usart2_callback+0x34>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <usart2_callback+0x38>)
 800021c:	701a      	strb	r2, [r3, #0]

	if(key == '1'){
 800021e:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <usart2_callback+0x38>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b31      	cmp	r3, #49	; 0x31
 8000224:	d103      	bne.n	800022e <usart2_callback+0x1e>
			GPIOA->ODR = LED_PIN;
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <usart2_callback+0x3c>)
 8000228:	2220      	movs	r2, #32
 800022a:	615a      	str	r2, [r3, #20]
	}else {
			GPIOA->ODR &= ~LED_PIN;
	}
}
 800022c:	e005      	b.n	800023a <usart2_callback+0x2a>
			GPIOA->ODR &= ~LED_PIN;
 800022e:	4b07      	ldr	r3, [pc, #28]	; (800024c <usart2_callback+0x3c>)
 8000230:	695b      	ldr	r3, [r3, #20]
 8000232:	4a06      	ldr	r2, [pc, #24]	; (800024c <usart2_callback+0x3c>)
 8000234:	f023 0320 	bic.w	r3, r3, #32
 8000238:	6153      	str	r3, [r2, #20]
}
 800023a:	bf00      	nop
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	40004400 	.word	0x40004400
 8000248:	2000001c 	.word	0x2000001c
 800024c:	40020000 	.word	0x40020000

08000250 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	//CHekc if DR is empty
	if(USART2->SR & RXNE){
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <USART2_IRQHandler+0x18>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f003 0320 	and.w	r3, r3, #32
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <USART2_IRQHandler+0x14>
		usart2_callback();
 8000260:	f7ff ffd6 	bl	8000210 <usart2_callback>
	}
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40004400 	.word	0x40004400

0800026c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027a:	2b00      	cmp	r3, #0
 800027c:	db0b      	blt.n	8000296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f003 021f 	and.w	r2, r3, #31
 8000284:	4907      	ldr	r1, [pc, #28]	; (80002a4 <__NVIC_EnableIRQ+0x38>)
 8000286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028a:	095b      	lsrs	r3, r3, #5
 800028c:	2001      	movs	r0, #1
 800028e:	fa00 f202 	lsl.w	r2, r0, r2
 8000292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e100 	.word	0xe000e100

080002a8 <uart2_interrupt>:
int __io_putchar(uint8_t ch){
	uart2_write(ch);
	return ch;
}

void uart2_interrupt(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ac:	b672      	cpsid	i
}
 80002ae:	bf00      	nop
	//Disable interrupts
	__disable_irq();
	//COnfigure uart gpio pin
	RCC->AHB1ENR |= GPIOAEN;
 80002b0:	4b2a      	ldr	r3, [pc, #168]	; (800035c <uart2_interrupt+0xb4>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b4:	4a29      	ldr	r2, [pc, #164]	; (800035c <uart2_interrupt+0xb4>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6313      	str	r3, [r2, #48]	; 0x30
	//Set PA2 to alternate function mode
	//Set PA2 alternate function to AF07
	GPIOA->MODER &= ~(1U<<4);
 80002bc:	4b28      	ldr	r3, [pc, #160]	; (8000360 <uart2_interrupt+0xb8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a27      	ldr	r2, [pc, #156]	; (8000360 <uart2_interrupt+0xb8>)
 80002c2:	f023 0310 	bic.w	r3, r3, #16
 80002c6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80002c8:	4b25      	ldr	r3, [pc, #148]	; (8000360 <uart2_interrupt+0xb8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a24      	ldr	r2, [pc, #144]	; (8000360 <uart2_interrupt+0xb8>)
 80002ce:	f043 0320 	orr.w	r3, r3, #32
 80002d2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (7U<<8);
 80002d4:	4b22      	ldr	r3, [pc, #136]	; (8000360 <uart2_interrupt+0xb8>)
 80002d6:	6a1b      	ldr	r3, [r3, #32]
 80002d8:	4a21      	ldr	r2, [pc, #132]	; (8000360 <uart2_interrupt+0xb8>)
 80002da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80002de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80002e0:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <uart2_interrupt+0xb8>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a1e      	ldr	r2, [pc, #120]	; (8000360 <uart2_interrupt+0xb8>)
 80002e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002ea:	6213      	str	r3, [r2, #32]

	//Set PA3 to alternate function mode
	GPIOA->MODER &= ~(1U<<6);
 80002ec:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <uart2_interrupt+0xb8>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <uart2_interrupt+0xb8>)
 80002f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <uart2_interrupt+0xb8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a18      	ldr	r2, [pc, #96]	; (8000360 <uart2_interrupt+0xb8>)
 80002fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000302:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= (7U<<12);
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <uart2_interrupt+0xb8>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a15      	ldr	r2, [pc, #84]	; (8000360 <uart2_interrupt+0xb8>)
 800030a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800030e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8000310:	4b13      	ldr	r3, [pc, #76]	; (8000360 <uart2_interrupt+0xb8>)
 8000312:	6a1b      	ldr	r3, [r3, #32]
 8000314:	4a12      	ldr	r2, [pc, #72]	; (8000360 <uart2_interrupt+0xb8>)
 8000316:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800031a:	6213      	str	r3, [r2, #32]

	//Enable clock access to RCC_APB1ENR
	RCC->APB1ENR = USARTEN2;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <uart2_interrupt+0xb4>)
 800031e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000322:	641a      	str	r2, [r3, #64]	; 0x40
	//Set the Baudrate
	uart_set_baud(USART2, APB1_CLK, BAUD);
 8000324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000328:	490e      	ldr	r1, [pc, #56]	; (8000364 <uart2_interrupt+0xbc>)
 800032a:	480f      	ldr	r0, [pc, #60]	; (8000368 <uart2_interrupt+0xc0>)
 800032c:	f000 f81e 	bl	800036c <uart_set_baud>
	//TX enable, m=8 BIT word
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000330:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <uart2_interrupt+0xc0>)
 8000332:	220c      	movs	r2, #12
 8000334:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= UE;
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <uart2_interrupt+0xc0>)
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <uart2_interrupt+0xc0>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	60d3      	str	r3, [r2, #12]

	//Enable USART Interrupt
	USART2->CR1 |= RXNEIE;
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <uart2_interrupt+0xc0>)
 8000344:	68db      	ldr	r3, [r3, #12]
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <uart2_interrupt+0xc0>)
 8000348:	f043 0320 	orr.w	r3, r3, #32
 800034c:	60d3      	str	r3, [r2, #12]
	//Enable interrupt in NVIC
	NVIC_EnableIRQ(USART2_IRQn);
 800034e:	2026      	movs	r0, #38	; 0x26
 8000350:	f7ff ff8c 	bl	800026c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000354:	b662      	cpsie	i
}
 8000356:	bf00      	nop
	//Enable interrupt
	__enable_irq();
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40023800 	.word	0x40023800
 8000360:	40020000 	.word	0x40020000
 8000364:	00f42400 	.word	0x00f42400
 8000368:	40004400 	.word	0x40004400

0800036c <uart_set_baud>:
	while(!(USART2->SR & TXE));
	//Transmit to data register
	USART2->DR = (ch & 0XFF);
}

static void uart_set_baud(USART_TypeDef *USARTx, uint32_t clk,uint32_t baud){
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_baud(clk,baud);
 8000378:	6879      	ldr	r1, [r7, #4]
 800037a:	68b8      	ldr	r0, [r7, #8]
 800037c:	f000 f808 	bl	8000390 <compute_uart_baud>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	609a      	str	r2, [r3, #8]
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <compute_uart_baud>:

static uint16_t compute_uart_baud(uint32_t clk, uint32_t baud){
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
	return ((clk + (baud/2U))/baud);
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	085a      	lsrs	r2, r3, #1
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	441a      	add	r2, r3
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a8:	b29b      	uxth	r3, r3
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
	...

080003b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b8:	480d      	ldr	r0, [pc, #52]	; (80003f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c2:	490d      	ldr	r1, [pc, #52]	; (80003f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c4:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <LoopForever+0xe>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d8:	4c0a      	ldr	r4, [pc, #40]	; (8000404 <LoopForever+0x16>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e6:	f000 f811 	bl	800040c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ea:	f7ff fef5 	bl	80001d8 <main>

080003ee <LoopForever>:

LoopForever:
    b LoopForever
 80003ee:	e7fe      	b.n	80003ee <LoopForever>
  ldr   r0, =_estack
 80003f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003fc:	08000474 	.word	0x08000474
  ldr r2, =_sbss
 8000400:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000404:	20000020 	.word	0x20000020

08000408 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <__libc_init_array>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	4d0d      	ldr	r5, [pc, #52]	; (8000444 <__libc_init_array+0x38>)
 8000410:	4c0d      	ldr	r4, [pc, #52]	; (8000448 <__libc_init_array+0x3c>)
 8000412:	1b64      	subs	r4, r4, r5
 8000414:	10a4      	asrs	r4, r4, #2
 8000416:	2600      	movs	r6, #0
 8000418:	42a6      	cmp	r6, r4
 800041a:	d109      	bne.n	8000430 <__libc_init_array+0x24>
 800041c:	4d0b      	ldr	r5, [pc, #44]	; (800044c <__libc_init_array+0x40>)
 800041e:	4c0c      	ldr	r4, [pc, #48]	; (8000450 <__libc_init_array+0x44>)
 8000420:	f000 f818 	bl	8000454 <_init>
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	2600      	movs	r6, #0
 800042a:	42a6      	cmp	r6, r4
 800042c:	d105      	bne.n	800043a <__libc_init_array+0x2e>
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f855 3b04 	ldr.w	r3, [r5], #4
 8000434:	4798      	blx	r3
 8000436:	3601      	adds	r6, #1
 8000438:	e7ee      	b.n	8000418 <__libc_init_array+0xc>
 800043a:	f855 3b04 	ldr.w	r3, [r5], #4
 800043e:	4798      	blx	r3
 8000440:	3601      	adds	r6, #1
 8000442:	e7f2      	b.n	800042a <__libc_init_array+0x1e>
 8000444:	0800046c 	.word	0x0800046c
 8000448:	0800046c 	.word	0x0800046c
 800044c:	0800046c 	.word	0x0800046c
 8000450:	08000470 	.word	0x08000470

08000454 <_init>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr

08000460 <_fini>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr
